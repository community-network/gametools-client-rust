/*
 * Stats API for the Battlefield series
 *
 * This project also has a <a href=\"https://top.gg/bot/714524944783900794\" target=\"_blank\">Discord bot</a>, allowing anyone in your server to check their Battlefield stats via simple commands.<br><br>Language tags (lang) for both Battlefield 1 and Battlefield 5 are based on <a href=\"https://www.oracle.com/java/technologies/javase/jdk8-jre8-suported-locales.html\" target=\"_blank\">Java 8 language tags.</a> (response keys do not change based on the language tags, only the values do).<br><br>Data for Battlefield 2 is retrieved from the two revive projects: <a href=\"https://www.bf2hub.com\" target=\"_blank\">BF2Hub</a> and <a href=\"https://playbf2.tilda.ws/en\" target=\"_blank\">PlayBF2</a>.<br><br>Data for Battlefield 2142 is retrieved from the <a href=\"https://battlefield2142.co/\" target=\"_blank\">BF2142 Reclamation</a> project.<br><br>All other titles are still managed by EA/Dice.<br><br>If you discover any issues or have suggestions for new features, post them in the Community Network Discord: <a href=\"https://discord.gg/zMuxW6c\" target=\"_blank\">discord.gg/zMuxW6c</a>.<br><br>If you want to support the project, consider <a href=\"https://github.com/sponsors/community-network\" target=\"_blank\">becoming a sponsor on GitHub</a>.
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvailableMapEntry {
    #[serde(rename = "levelName")]
    pub level_name: String,
    #[serde(rename = "gameMode")]
    pub game_mode: String,
    #[serde(rename = "levelLocation")]
    pub level_location: String,
    #[serde(rename = "gameSize")]
    pub game_size: Box<models::AvailableIntValue>,
    #[serde(rename = "rounds")]
    pub rounds: Box<models::AvailableIntValue>,
    #[serde(rename = "warmUpSize")]
    pub warm_up_size: Box<models::AvailableIntValue>,
    #[serde(rename = "allowedSpectators")]
    pub allowed_spectators: Box<models::AvailableIntValue>,
    #[serde(rename = "mutators")]
    pub mutators: Vec<models::AvailableMutator>,
    #[serde(rename = "metadata")]
    pub metadata: Box<models::Metadata>,
}

impl AvailableMapEntry {
    pub fn new(level_name: String, game_mode: String, level_location: String, game_size: models::AvailableIntValue, rounds: models::AvailableIntValue, warm_up_size: models::AvailableIntValue, allowed_spectators: models::AvailableIntValue, mutators: Vec<models::AvailableMutator>, metadata: models::Metadata) -> AvailableMapEntry {
        AvailableMapEntry {
            level_name,
            game_mode,
            level_location,
            game_size: Box::new(game_size),
            rounds: Box::new(rounds),
            warm_up_size: Box::new(warm_up_size),
            allowed_spectators: Box::new(allowed_spectators),
            mutators,
            metadata: Box::new(metadata),
        }
    }
}

