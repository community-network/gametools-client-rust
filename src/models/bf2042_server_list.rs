/*
 * Stats API for the Battlefield series
 *
 * This project also has a <a href=\"https://top.gg/bot/714524944783900794\" target=\"_blank\">Discord bot</a>, allowing anyone in your server to check their Battlefield stats via simple commands.<br><br>Language tags (lang) for both Battlefield 1 and Battlefield 5 are based on <a href=\"https://www.oracle.com/java/technologies/javase/jdk8-jre8-suported-locales.html\" target=\"_blank\">Java 8 language tags.</a> (response keys do not change based on the language tags, only the values do).<br><br>Data for Battlefield 2 is retrieved from the two revive projects: <a href=\"https://www.bf2hub.com\" target=\"_blank\">BF2Hub</a> and <a href=\"https://playbf2.tilda.ws/en\" target=\"_blank\">PlayBF2</a>.<br><br>Data for Battlefield 2142 is retrieved from the <a href=\"https://battlefield2142.co/\" target=\"_blank\">BF2142 Reclamation</a> project.<br><br>All other titles are still managed by EA/Dice.<br><br>If you discover any issues or have suggestions for new features, post them in the Community Network Discord: <a href=\"https://discord.gg/zMuxW6c\" target=\"_blank\">discord.gg/zMuxW6c</a>.<br><br>If you want to support the project, consider <a href=\"https://github.com/sponsors/community-network\" target=\"_blank\">becoming a sponsor on GitHub</a>.
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Bf2042ServerList {
    #[serde(rename = "prefix")]
    pub prefix: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "currentMap")]
    pub current_map: String,
    #[serde(rename = "inQue")]
    pub in_que: i32,
    #[serde(rename = "mode")]
    pub mode: String,
    #[serde(rename = "ownerId")]
    pub owner_id: i32,
    #[serde(rename = "playerAmount")]
    pub player_amount: i32,
    #[serde(rename = "region")]
    pub region: String,
    #[serde(rename = "smallMode")]
    pub small_mode: String,
    #[serde(rename = "maxPlayers")]
    pub max_players: i32,
    #[serde(rename = "hasPassword")]
    pub has_password: String,
    #[serde(rename = "serverId")]
    pub server_id: String,
    #[serde(rename = "adventure")]
    pub adventure: String,
    #[serde(rename = "serverType")]
    pub server_type: i32,
    #[serde(rename = "owner")]
    pub owner: Box<models::Bf2042ServerOwner>,
    #[serde(rename = "maxQue")]
    pub max_que: i32,
    #[serde(rename = "settings")]
    pub settings: Vec<String>,
    #[serde(rename = "lat")]
    pub lat: i32,
    #[serde(rename = "blazeGameId")]
    pub blaze_game_id: i32,
    #[serde(rename = "progress")]
    pub progress: i32,
    #[serde(rename = "regionId")]
    pub region_id: String,
}

impl Bf2042ServerList {
    pub fn new(prefix: String, url: String, current_map: String, in_que: i32, mode: String, owner_id: i32, player_amount: i32, region: String, small_mode: String, max_players: i32, has_password: String, server_id: String, adventure: String, server_type: i32, owner: models::Bf2042ServerOwner, max_que: i32, settings: Vec<String>, lat: i32, blaze_game_id: i32, progress: i32, region_id: String) -> Bf2042ServerList {
        Bf2042ServerList {
            prefix,
            url,
            current_map,
            in_que,
            mode,
            owner_id,
            player_amount,
            region,
            small_mode,
            max_players,
            has_password,
            server_id,
            adventure,
            server_type,
            owner: Box::new(owner),
            max_que,
            settings,
            lat,
            blaze_game_id,
            progress,
            region_id,
        }
    }
}

