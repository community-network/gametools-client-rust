/*
 * Stats API for the Battlefield series
 *
 * This project also has a <a href=\"https://top.gg/bot/714524944783900794\" target=\"_blank\">Discord bot</a>, allowing anyone in your server to check their Battlefield stats via simple commands.<br><br>Language tags (lang) for both Battlefield 1 and Battlefield 5 are based on <a href=\"https://www.oracle.com/java/technologies/javase/jdk8-jre8-suported-locales.html\" target=\"_blank\">Java 8 language tags.</a> (response keys do not change based on the language tags, only the values do).<br><br>Data for Battlefield 2 is retrieved from the two revive projects: <a href=\"https://www.bf2hub.com\" target=\"_blank\">BF2Hub</a> and <a href=\"https://playbf2.tilda.ws/en\" target=\"_blank\">PlayBF2</a>.<br><br>Data for Battlefield 2142 is retrieved from the <a href=\"https://battlefield2142.co/\" target=\"_blank\">BF2142 Reclamation</a> project.<br><br>All other titles are still managed by EA/Dice.<br><br>If you discover any issues or have suggestions for new features, post them in the Community Network Discord: <a href=\"https://discord.gg/zMuxW6c\" target=\"_blank\">discord.gg/zMuxW6c</a>.<br><br>If you want to support the project, consider <a href=\"https://github.com/sponsors/community-network\" target=\"_blank\">becoming a sponsor on GitHub</a>.
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BfvMultiplePlayer {
    #[serde(rename = "kills")]
    pub kills: i32,
    #[serde(rename = "deaths")]
    pub deaths: i32,
    #[serde(rename = "wins")]
    pub wins: i32,
    #[serde(rename = "loses")]
    pub loses: i32,
    #[serde(rename = "killsPerMatch")]
    pub kills_per_match: i32,
    #[serde(rename = "headShots")]
    pub head_shots: i32,
    #[serde(rename = "winPercent")]
    pub win_percent: String,
    #[serde(rename = "headshots")]
    pub headshots: String,
    #[serde(rename = "killDeath")]
    pub kill_death: i32,
    #[serde(rename = "awardScore")]
    pub award_score: i32,
    #[serde(rename = "bonusScore")]
    pub bonus_score: i32,
    #[serde(rename = "squadScore")]
    pub squad_score: i32,
    #[serde(rename = "longestHeadShot")]
    pub longest_head_shot: i32,
    #[serde(rename = "revives")]
    pub revives: i32,
    #[serde(rename = "dogtagsTaken")]
    pub dogtags_taken: i32,
    #[serde(rename = "heals")]
    pub heals: i32,
    #[serde(rename = "repairs")]
    pub repairs: i32,
    #[serde(rename = "killAssists")]
    pub kill_assists: i32,
    #[serde(rename = "weapons")]
    pub weapons: Vec<models::BfvMultipleWeaponInfo>,
    #[serde(rename = "vehicles")]
    pub vehicles: Vec<models::BfvMultipleVehicleInfo>,
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "avengerKills")]
    pub avenger_kills: i32,
    #[serde(rename = "saviorKills")]
    pub savior_kills: i32,
}

impl BfvMultiplePlayer {
    pub fn new(kills: i32, deaths: i32, wins: i32, loses: i32, kills_per_match: i32, head_shots: i32, win_percent: String, headshots: String, kill_death: i32, award_score: i32, bonus_score: i32, squad_score: i32, longest_head_shot: i32, revives: i32, dogtags_taken: i32, heals: i32, repairs: i32, kill_assists: i32, weapons: Vec<models::BfvMultipleWeaponInfo>, vehicles: Vec<models::BfvMultipleVehicleInfo>, id: i32, avenger_kills: i32, savior_kills: i32) -> BfvMultiplePlayer {
        BfvMultiplePlayer {
            kills,
            deaths,
            wins,
            loses,
            kills_per_match,
            head_shots,
            win_percent,
            headshots,
            kill_death,
            award_score,
            bonus_score,
            squad_score,
            longest_head_shot,
            revives,
            dogtags_taken,
            heals,
            repairs,
            kill_assists,
            weapons,
            vehicles,
            id,
            avenger_kills,
            savior_kills,
        }
    }
}

