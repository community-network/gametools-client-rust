/*
 * Stats API for the Battlefield series
 *
 * This project also has a <a href=\"https://top.gg/bot/714524944783900794\" target=\"_blank\">Discord bot</a>, allowing anyone in your server to check their Battlefield stats via simple commands.<br><br>Language tags (lang) for both Battlefield 1 and Battlefield 5 are based on <a href=\"https://www.oracle.com/java/technologies/javase/jdk8-jre8-suported-locales.html\" target=\"_blank\">Java 8 language tags.</a> (response keys do not change based on the language tags, only the values do).<br><br>Data for Battlefield 2 is retrieved from the two revive projects: <a href=\"https://www.bf2hub.com\" target=\"_blank\">BF2Hub</a> and <a href=\"https://playbf2.tilda.ws/en\" target=\"_blank\">PlayBF2</a>.<br><br>Data for Battlefield 2142 is retrieved from the <a href=\"https://battlefield2142.co/\" target=\"_blank\">BF2142 Reclamation</a> project.<br><br>All other titles are still managed by EA/Dice.<br><br>If you discover any issues or have suggestions for new features, post them in the Community Network Discord: <a href=\"https://discord.gg/zMuxW6c\" target=\"_blank\">discord.gg/zMuxW6c</a>.<br><br>If you want to support the project, consider <a href=\"https://github.com/sponsors/community-network\" target=\"_blank\">becoming a sponsor on GitHub</a>.
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Playground {
    #[serde(rename = "blocklyData", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub blockly_data: Option<Option<Box<models::WebData>>>,
    #[serde(rename = "playgroundId")]
    pub playground_id: String,
    #[serde(rename = "blueprintType")]
    pub blueprint_type: String,
    #[serde(rename = "playgroundName")]
    pub playground_name: String,
    #[serde(rename = "playgroundDescription")]
    pub playground_description: String,
    #[serde(rename = "mutators")]
    pub mutators: Vec<models::PlaygroundMutator>,
    #[serde(rename = "mapRotation")]
    pub map_rotation: Box<models::MapRotation>,
    #[serde(rename = "state")]
    pub state: i32,
    #[serde(rename = "checksum")]
    pub checksum: String,
    #[serde(rename = "secret")]
    pub secret: String,
    #[serde(rename = "createdAt")]
    pub created_at: Box<models::Creation>,
    #[serde(rename = "updatedAt")]
    pub updated_at: Box<models::Creation>,
    #[serde(rename = "settings")]
    pub settings: Box<models::PlaygroundSettings>,
    #[serde(rename = "owner")]
    pub owner: Box<models::PlayerInfoReturn>,
    #[serde(rename = "restrictions")]
    pub restrictions: Box<models::Restrictions>,
    #[serde(rename = "modRules")]
    pub mod_rules: Box<models::OriginalModRules>,
    #[serde(rename = "assetCategories")]
    pub asset_categories: Vec<models::AssetCategory>,
}

impl Playground {
    pub fn new(playground_id: String, blueprint_type: String, playground_name: String, playground_description: String, mutators: Vec<models::PlaygroundMutator>, map_rotation: models::MapRotation, state: i32, checksum: String, secret: String, created_at: models::Creation, updated_at: models::Creation, settings: models::PlaygroundSettings, owner: models::PlayerInfoReturn, restrictions: models::Restrictions, mod_rules: models::OriginalModRules, asset_categories: Vec<models::AssetCategory>) -> Playground {
        Playground {
            blockly_data: None,
            playground_id,
            blueprint_type,
            playground_name,
            playground_description,
            mutators,
            map_rotation: Box::new(map_rotation),
            state,
            checksum,
            secret,
            created_at: Box::new(created_at),
            updated_at: Box::new(updated_at),
            settings: Box::new(settings),
            owner: Box::new(owner),
            restrictions: Box::new(restrictions),
            mod_rules: Box::new(mod_rules),
            asset_categories,
        }
    }
}

