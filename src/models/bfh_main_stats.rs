/*
 * Stats API for the Battlefield series
 *
 * This project also has a <a href=\"https://top.gg/bot/714524944783900794\" target=\"_blank\">Discord bot</a>, allowing anyone in your server to check their Battlefield stats via simple commands.<br><br>Language tags (lang) for both Battlefield 1 and Battlefield 5 are based on <a href=\"https://www.oracle.com/java/technologies/javase/jdk8-jre8-suported-locales.html\" target=\"_blank\">Java 8 language tags.</a> (response keys do not change based on the language tags, only the values do).<br><br>Data for Battlefield 2 is retrieved from the two revive projects: <a href=\"https://www.bf2hub.com\" target=\"_blank\">BF2Hub</a> and <a href=\"https://playbf2.tilda.ws/en\" target=\"_blank\">PlayBF2</a>.<br><br>Data for Battlefield 2142 is retrieved from the <a href=\"https://battlefield2142.co/\" target=\"_blank\">BF2142 Reclamation</a> project.<br><br>All other titles are still managed by EA/Dice.<br><br>If you discover any issues or have suggestions for new features, post them in the Community Network Discord: <a href=\"https://discord.gg/zMuxW6c\" target=\"_blank\">discord.gg/zMuxW6c</a>.<br><br>If you want to support the project, consider <a href=\"https://github.com/sponsors/community-network\" target=\"_blank\">becoming a sponsor on GitHub</a>.
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BfhMainStats {
    #[serde(rename = "avatar", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub avatar: Option<Option<String>>,
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "userName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<Option<String>>,
    #[serde(rename = "userId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<Option<i32>>,
    #[serde(rename = "rank")]
    pub rank: i32,
    #[serde(rename = "rankImg")]
    pub rank_img: String,
    #[serde(rename = "killsPerMinute")]
    pub kills_per_minute: i32,
    #[serde(rename = "scorePerMinute")]
    pub score_per_minute: i32,
    #[serde(rename = "winPercent")]
    pub win_percent: i32,
    #[serde(rename = "bestClass")]
    pub best_class: i32,
    #[serde(rename = "accuracy")]
    pub accuracy: i32,
    #[serde(rename = "timePlayed")]
    pub time_played: String,
    #[serde(rename = "secondsPlayed")]
    pub seconds_played: i32,
    #[serde(rename = "killDeath")]
    pub kill_death: i32,
    #[serde(rename = "kills")]
    pub kills: i32,
    #[serde(rename = "deaths")]
    pub deaths: i32,
    #[serde(rename = "wins")]
    pub wins: i32,
    #[serde(rename = "loses")]
    pub loses: i32,
    #[serde(rename = "heals")]
    pub heals: i32,
    #[serde(rename = "repairs")]
    pub repairs: i32,
    #[serde(rename = "avengerKills")]
    pub avenger_kills: i32,
    #[serde(rename = "saviorKills")]
    pub savior_kills: i32,
    #[serde(rename = "headShots")]
    pub head_shots: i32,
    #[serde(rename = "killAssists")]
    pub kill_assists: i32,
    #[serde(rename = "enforcer")]
    pub enforcer: i32,
    #[serde(rename = "mechanic")]
    pub mechanic: i32,
    #[serde(rename = "operator")]
    pub operator: i32,
    #[serde(rename = "professional")]
    pub professional: i32,
    #[serde(rename = "hacker")]
    pub hacker: i32,
    #[serde(rename = "cashPerMinute")]
    pub cash_per_minute: i32,
}

impl BfhMainStats {
    pub fn new(id: i32, rank: i32, rank_img: String, kills_per_minute: i32, score_per_minute: i32, win_percent: i32, best_class: i32, accuracy: i32, time_played: String, seconds_played: i32, kill_death: i32, kills: i32, deaths: i32, wins: i32, loses: i32, heals: i32, repairs: i32, avenger_kills: i32, savior_kills: i32, head_shots: i32, kill_assists: i32, enforcer: i32, mechanic: i32, operator: i32, professional: i32, hacker: i32, cash_per_minute: i32) -> BfhMainStats {
        BfhMainStats {
            avatar: None,
            id,
            user_name: None,
            user_id: None,
            rank,
            rank_img,
            kills_per_minute,
            score_per_minute,
            win_percent,
            best_class,
            accuracy,
            time_played,
            seconds_played,
            kill_death,
            kills,
            deaths,
            wins,
            loses,
            heals,
            repairs,
            avenger_kills,
            savior_kills,
            head_shots,
            kill_assists,
            enforcer,
            mechanic,
            operator,
            professional,
            hacker,
            cash_per_minute,
        }
    }
}

