/*
 * Stats API for the Battlefield series
 *
 * This project also has a <a href=\"https://top.gg/bot/714524944783900794\" target=\"_blank\">Discord bot</a>, allowing anyone in your server to check their Battlefield stats via simple commands.<br><br>Language tags (lang) for both Battlefield 1 and Battlefield 5 are based on <a href=\"https://www.oracle.com/java/technologies/javase/jdk8-jre8-suported-locales.html\" target=\"_blank\">Java 8 language tags.</a> (response keys do not change based on the language tags, only the values do).<br><br>Data for Battlefield 2 is retrieved from the two revive projects: <a href=\"https://www.bf2hub.com\" target=\"_blank\">BF2Hub</a> and <a href=\"https://playbf2.tilda.ws/en\" target=\"_blank\">PlayBF2</a>.<br><br>Data for Battlefield 2142 is retrieved from the <a href=\"https://battlefield2142.co/\" target=\"_blank\">BF2142 Reclamation</a> project.<br><br>All other titles are still managed by EA/Dice.<br><br>If you discover any issues or have suggestions for new features, post them in the Community Network Discord: <a href=\"https://discord.gg/zMuxW6c\" target=\"_blank\">discord.gg/zMuxW6c</a>.<br><br>If you want to support the project, consider <a href=\"https://github.com/sponsors/community-network\" target=\"_blank\">becoming a sponsor on GitHub</a>.
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Bf2042DetailedServerInfo {
    #[serde(rename = "region")]
    pub region: String,
    #[serde(rename = "currentMap")]
    pub current_map: String,
    #[serde(rename = "currentMapImage")]
    pub current_map_image: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "playerAmount")]
    pub player_amount: i32,
    #[serde(rename = "prefix")]
    pub prefix: String,
    #[serde(rename = "protocolVersion")]
    pub protocol_version: String,
    #[serde(rename = "currentMapId")]
    pub current_map_id: i32,
    #[serde(rename = "serverInfo")]
    pub server_info: Box<models::Bf2042ServerInfo>,
    #[serde(rename = "pingSite")]
    pub ping_site: String,
    #[serde(rename = "assetCategories")]
    pub asset_categories: Vec<models::Bf2042AssetCategory>,
    #[serde(rename = "owner")]
    pub owner: Box<models::Bf2042DetailedServerOwner>,
    #[serde(rename = "settings")]
    pub settings: Vec<models::Bf2042Setting>,
    #[serde(rename = "maxPlayers")]
    pub max_players: i32,
    #[serde(rename = "progress")]
    pub progress: i32,
    #[serde(rename = "rotation")]
    pub rotation: Vec<models::Bf2042ServerRotation>,
    #[serde(rename = "serverId")]
    pub server_id: String,
    #[serde(rename = "mutators")]
    pub mutators: Vec<models::Bf2042Mutators>,
    #[serde(rename = "blazeGameId")]
    pub blaze_game_id: i32,
    #[serde(rename = "configCreator")]
    pub config_creator: Box<models::Bf2042DetailedServerOwner>,
    #[serde(rename = "progressionMode")]
    pub progression_mode: Box<models::StringValue>,
}

impl Bf2042DetailedServerInfo {
    pub fn new(region: String, current_map: String, current_map_image: String, description: String, player_amount: i32, prefix: String, protocol_version: String, current_map_id: i32, server_info: models::Bf2042ServerInfo, ping_site: String, asset_categories: Vec<models::Bf2042AssetCategory>, owner: models::Bf2042DetailedServerOwner, settings: Vec<models::Bf2042Setting>, max_players: i32, progress: i32, rotation: Vec<models::Bf2042ServerRotation>, server_id: String, mutators: Vec<models::Bf2042Mutators>, blaze_game_id: i32, config_creator: models::Bf2042DetailedServerOwner, progression_mode: models::StringValue) -> Bf2042DetailedServerInfo {
        Bf2042DetailedServerInfo {
            region,
            current_map,
            current_map_image,
            description,
            player_amount,
            prefix,
            protocol_version,
            current_map_id,
            server_info: Box::new(server_info),
            ping_site,
            asset_categories,
            owner: Box::new(owner),
            settings,
            max_players,
            progress,
            rotation,
            server_id,
            mutators,
            blaze_game_id,
            config_creator: Box::new(config_creator),
            progression_mode: Box::new(progression_mode),
        }
    }
}

